- app/ui: hier sind die Komponenten definiert. Diese werden exportiert und können dann als tag in einer anderen komponente verwendet werden
- Wenn eine <link> Komponente definiert wurde, prerendert next.js schon die Seiten die hier definiert sind (partial rendering)
- Beim Routing wird auf das App Verzeichnis zugegriffen und als root betrachtet. Also / greift auf /app einfach zu.
- Props: Steht für propertiy in react und sie sind dafür verantwortlich, Daten von einer Komponente an eine andere weiter zu geben
- layout.tsx und page.tsx: jede Route die eine eigene UI haben soll, hat diese Files. Wenn die Route aufgerufen wird, wird die layout.tsx Datei geladen. Ale weiteren unterordner werden vorgerendert und in der layout datei kann über children prop definiert werden, wo dann die unterroute hingerendert wird. Als root layout wird die layout.tsx im /app Verzeichnis bezeichnet und ist vorraussetzung. In der Children Property kann auch eine weitere layout datei z.B. von einer anderen Route geladen werden

- React ist eine Bibliothek für UI Komponenten und next.js ein Framework 
- JSX ermöglicht es, JS funktionen, die html returnen als Tag in neuen jsx funktionen einzubinden
- JSX muss immer genested sein, also wenn mehrere Zeilen HTML im return stehen, muss ein Fagment <> </> drum rum sein. Translator: https://transform.tools/html-to-jsx
- komponenten können async definiert werden, das ist vor allem wichtig wenn daten aus einer db anwendung gefetcht werden (mit await)

DB:
- Cloud Basierte postgres db in vercel (hosting plattform die mit github repo auf code basis verknüpft ist)
- React Server Components: ermöglichen SSR, da sie zwar über das tag in das js xml eingefügt werden, aber schon gerendert. Next.js nutzt diese per Default
- useState: wenn lokal in der Komponente was geändert wird (counter o.Ä.) dann verwaltet react den Status und sorgt dafür dass bei neuem rendering der state gleich bleibt
- Server Components werden genutzt um die DB zu fetchen, da sie ja eh auf dem Server ausgeführt werden und man braucht keine API 
- Mit ServerComponents lässt sich Client und Server trennen

Architektur:
- in /lib ist die data Datei, die alle DB Anfragen vornimmt und diese kann man dann in die Komponente importieren
- in /lib/definitions sind die Typen der Daten definiert, diese werden in /lib/data importiert und dann mittels typescript parameter definiert, wie der Datentyp aus der DB aussehen muss
- loading.tsx: Spezielles next.js File, welches beim Ladeprozess einer Komponente ausgespielt wird

- <Suspense> kann Komponenten wrappen und lädt diese dann erst in die Seite, wenn die Daten für die Komponente vorhanden sind. D.h. die fetch Funktionen für Daten kommen in die Komponente anstatt mit Props die Daten von der untergeordneten Komponente zu übergeben. So kann man granular enstscheinden wie die UI sich aufbaut
- <Pagination/> 